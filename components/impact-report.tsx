"use client"

import { useState, useEffect } from "react"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Download, FileText, Loader2, AlertTriangle, Copy, CheckCircle } from "lucide-react"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Separator } from "@/components/ui/separator"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

interface ImpactReportProps {
  location: any
  meteorData: any
}

interface ReportData {
  summary: string
  metrics: {
    impactEnergy: string
    craterDiameter: string
    blastRadius: string
    evacuationZone: string
    seismicMagnitude: string
  }
  timestamp: string
}

export default function ImpactReport({ location, meteorData }: ImpactReportProps) {
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [report, setReport] = useState<ReportData | null>(null)
  const [copied, setCopied] = useState(false)

  useEffect(() => {
    generateReport()
  }, [])

  const generateReport = async () => {
    setLoading(true)
    setError(null)

    try {
      const response = await fetch("/api/analyze-impact", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ meteorData, location }),
      })

      if (!response.ok) {
        throw new Error("Failed to generate report")
      }

      const data = await response.json()
      setReport(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to generate report")
    } finally {
      setLoading(false)
    }
  }

  const getReportText = () => {
    if (!report) return ""

    return `METEOR IMPACT ANALYSIS REPORT
Generated: ${new Date(report.timestamp).toLocaleString()}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

IMPACT LOCATION
Location: ${location.name || "Unknown"}
Coordinates: ${location.latitude}¬∞N, ${location.longitude}¬∞W

METEOR PARAMETERS
Speed: ${meteorData.speed.toLocaleString()} m/s
Diameter: ${meteorData.size} meters
Mass: ${(meteorData.mass / 1000000).toFixed(2)} million kg
Impact Angle: ${meteorData.angle}¬∞
Composition: ${meteorData.composition}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

KEY METRICS
Impact Energy: ${report.metrics.impactEnergy} megatons TNT
Crater Diameter: ${report.metrics.craterDiameter} meters
Blast Radius: ${report.metrics.blastRadius} km
Evacuation Zone: ${report.metrics.evacuationZone} km
Seismic Magnitude: ${report.metrics.seismicMagnitude}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

DETAILED ANALYSIS
${report.summary}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

DISCLAIMER
This analysis is generated using AI and scientific models. Actual 
impact effects may vary based on numerous factors including terrain, 
weather conditions, and local infrastructure. This tool is for 
educational and planning purposes only.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Report generated by Meteor Impact Simulator
NASA Space Apps Challenge 2025
https://github.com/nasa-space-apps`
  }

  const downloadTXT = () => {
    const reportText = getReportText()
    const blob = new Blob([reportText], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `meteor-impact-report-${Date.now()}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const downloadJSON = () => {
    if (!report) return

    const jsonData = {
      metadata: {
        generatedAt: report.timestamp,
        location: {
          name: location.name,
          latitude: location.latitude,
          longitude: location.longitude,
        },
        meteorParameters: {
          speed: meteorData.speed,
          size: meteorData.size,
          mass: meteorData.mass,
          angle: meteorData.angle,
          composition: meteorData.composition,
        },
      },
      metrics: report.metrics,
      analysis: report.summary,
    }

    const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: "application/json" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `meteor-impact-data-${Date.now()}.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const downloadHTML = () => {
    if (!report) return

    const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meteor Impact Analysis Report</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 900px;
            margin: 40px auto;
            padding: 20px;
            background: #f5f5f5;
            color: #333;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        h1 {
            color: #1a1a1a;
            border-bottom: 3px solid #e74c3c;
            padding-bottom: 10px;
        }
        h2 {
            color: #2c3e50;
            margin-top: 30px;
        }
        .metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        .metric-card {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            border-left: 4px solid #3498db;
        }
        .metric-label {
            font-size: 12px;
            color: #666;
            text-transform: uppercase;
        }
        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
        }
        .warning {
            background: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 15px;
            margin: 20px 0;
        }
        .analysis {
            line-height: 1.8;
            white-space: pre-wrap;
        }
        .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
            text-align: center;
            color: #666;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üå† Meteor Impact Analysis Report</h1>
        <p><strong>Generated:</strong> ${new Date(report.timestamp).toLocaleString()}</p>
        
        <h2>üìç Impact Location</h2>
        <p><strong>Location:</strong> ${location.name || "Unknown"}<br>
        <strong>Coordinates:</strong> ${location.latitude}¬∞N, ${location.longitude}¬∞W</p>
        
        <h2>‚òÑÔ∏è Meteor Parameters</h2>
        <p>
            <strong>Speed:</strong> ${meteorData.speed.toLocaleString()} m/s<br>
            <strong>Diameter:</strong> ${meteorData.size} meters<br>
            <strong>Mass:</strong> ${(meteorData.mass / 1000000).toFixed(2)} million kg<br>
            <strong>Impact Angle:</strong> ${meteorData.angle}¬∞<br>
            <strong>Composition:</strong> ${meteorData.composition}
        </p>
        
        <h2>üìä Key Metrics</h2>
        <div class="metrics">
            <div class="metric-card">
                <div class="metric-label">Impact Energy</div>
                <div class="metric-value">${report.metrics.impactEnergy} MT</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Crater Diameter</div>
                <div class="metric-value">${report.metrics.craterDiameter} m</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Blast Radius</div>
                <div class="metric-value">${report.metrics.blastRadius} km</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Evacuation Zone</div>
                <div class="metric-value">${report.metrics.evacuationZone} km</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Seismic Magnitude</div>
                <div class="metric-value">M ${report.metrics.seismicMagnitude}</div>
            </div>
        </div>
        
        <h2>üìã Detailed Analysis</h2>
        <div class="analysis">${report.summary}</div>
        
        <div class="warning">
            <strong>‚ö†Ô∏è Disclaimer:</strong> This analysis is generated using AI and scientific models. 
            Actual impact effects may vary based on numerous factors including terrain, weather conditions, 
            and local infrastructure. This tool is for educational and planning purposes only.
        </div>
        
        <div class="footer">
            Report generated by Meteor Impact Simulator<br>
            NASA Space Apps Challenge 2025
        </div>
    </div>
</body>
</html>`

    const blob = new Blob([htmlContent], { type: "text/html" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `meteor-impact-report-${Date.now()}.html`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const copyToClipboard = async () => {
    const reportText = getReportText()
    try {
      await navigator.clipboard.writeText(reportText)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error("Failed to copy:", err)
    }
  }

  if (loading) {
    return (
      <Card className="p-12">
        <div className="flex flex-col items-center justify-center gap-4">
          <Loader2 className="w-12 h-12 animate-spin text-primary" />
          <div className="text-center">
            <h3 className="text-lg font-semibold mb-2">Generating Impact Analysis</h3>
            <p className="text-sm text-muted-foreground">
              AI is analyzing the impact scenario and calculating damage estimates...
            </p>
          </div>
        </div>
      </Card>
    )
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>
          {error}
          <Button onClick={generateReport} variant="outline" size="sm" className="ml-4 bg-transparent">
            Retry
          </Button>
        </AlertDescription>
      </Alert>
    )
  }

  if (!report) return null

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between flex-wrap gap-4">
        <div>
          <h2 className="text-2xl font-bold mb-2 text-balance">Impact Analysis Report</h2>
          <p className="text-muted-foreground">AI-generated assessment of meteor impact consequences</p>
        </div>
        <div className="flex gap-2">
          <Button onClick={copyToClipboard} variant="outline">
            {copied ? <CheckCircle className="w-4 h-4 mr-2" /> : <Copy className="w-4 h-4 mr-2" />}
            {copied ? "Copied!" : "Copy"}
          </Button>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button>
                <Download className="w-4 h-4 mr-2" />
                Download Report
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={downloadTXT}>
                <FileText className="w-4 h-4 mr-2" />
                Download as TXT
              </DropdownMenuItem>
              <DropdownMenuItem onClick={downloadHTML}>
                <FileText className="w-4 h-4 mr-2" />
                Download as HTML
              </DropdownMenuItem>
              <DropdownMenuItem onClick={downloadJSON}>
                <FileText className="w-4 h-4 mr-2" />
                Download as JSON
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      <div className="grid md:grid-cols-3 gap-4">
        <Card className="p-4 border-destructive bg-destructive/5">
          <div className="flex items-center gap-2 mb-2">
            <AlertTriangle className="w-4 h-4 text-destructive" />
            <h3 className="font-semibold text-sm">Impact Energy</h3>
          </div>
          <p className="text-2xl font-bold">{report.metrics.impactEnergy}</p>
          <p className="text-xs text-muted-foreground">Megatons of TNT</p>
        </Card>

        <Card className="p-4 border-orange-500 bg-orange-50 dark:bg-orange-950">
          <div className="flex items-center gap-2 mb-2">
            <FileText className="w-4 h-4 text-orange-600" />
            <h3 className="font-semibold text-sm">Evacuation Zone</h3>
          </div>
          <p className="text-2xl font-bold">{report.metrics.evacuationZone} km</p>
          <p className="text-xs text-muted-foreground">Recommended radius</p>
        </Card>

        <Card className="p-4 border-yellow-500 bg-yellow-50 dark:bg-yellow-950">
          <div className="flex items-center gap-2 mb-2">
            <AlertTriangle className="w-4 h-4 text-yellow-600" />
            <h3 className="font-semibold text-sm">Seismic Activity</h3>
          </div>
          <p className="text-2xl font-bold">M {report.metrics.seismicMagnitude}</p>
          <p className="text-xs text-muted-foreground">Earthquake equivalent</p>
        </Card>
      </div>

      <Card className="p-6">
        <div className="flex items-center gap-2 mb-4">
          <FileText className="w-5 h-5 text-primary" />
          <h3 className="text-lg font-semibold">Impact Location Details</h3>
        </div>
        <div className="grid md:grid-cols-2 gap-4 text-sm">
          <div>
            <p className="text-muted-foreground">Location</p>
            <p className="font-semibold">{location.name || "Unknown"}</p>
          </div>
          <div>
            <p className="text-muted-foreground">Coordinates</p>
            <p className="font-mono">
              {location.latitude}¬∞N, {location.longitude}¬∞W
            </p>
          </div>
          <div>
            <p className="text-muted-foreground">Crater Diameter</p>
            <p className="font-semibold">{report.metrics.craterDiameter} meters</p>
          </div>
          <div>
            <p className="text-muted-foreground">Blast Radius</p>
            <p className="font-semibold">{report.metrics.blastRadius} km</p>
          </div>
        </div>
      </Card>

      <Card className="p-6">
        <div className="flex items-center gap-2 mb-4">
          <FileText className="w-5 h-5 text-primary" />
          <h3 className="text-lg font-semibold">Detailed Analysis</h3>
        </div>
        <Separator className="mb-4" />
        <div className="prose prose-sm max-w-none dark:prose-invert">
          <div className="whitespace-pre-wrap text-sm leading-relaxed">{report.summary}</div>
        </div>
      </Card>

      <Alert>
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>
          This analysis is generated using AI and scientific models. Actual impact effects may vary based on numerous
          factors including terrain, weather conditions, and local infrastructure. This tool is for educational and
          planning purposes only.
        </AlertDescription>
      </Alert>
    </div>
  )
}
